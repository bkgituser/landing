---
const { lengthSlides, activeSlide, speed, activeColor, colorInactive, customSliderClass, id } =
	Astro.props
---

<slide-timer
	data-active-slide={activeSlide}
	data-active-color={activeColor}
	data-speed={speed}
	data-stop="false"
	id={`${id}-slider-timer`}
	class="relative top-2 block"
>
	<div class="w-full">
		<div class={`flex justify-between gap-1 ${customSliderClass}`}>
			{
				Array(lengthSlides)
					.fill(null)
					.map(() => (
						<div style={{ background: colorInactive }} class={`bar h-[2px] w-full rounded-md`}>
							<div class={`fill-elem h-full w-0 bg-${activeColor}`} />
						</div>
					))
			}
		</div>
	</div>
</slide-timer>
<script>
	class SlideTimer extends HTMLElement {
		idInterval = null
		constructor() {
			super()
			if (!this.dataset.activeSlide || !this.dataset.speed) {
				return undefined
			}
			const activeIndex = this.dataset.activeSlide
			const speed = this.dataset.speed
			const stop = this.dataset.stop
			this._setActive(activeIndex, speed, stop)
			this._react()
		}

		_setActive(activeIndex, speed, stop) {
			clearInterval(this.idInterval)
			const bars = [...this.querySelectorAll('.bar')]
			const parsedActiveIndex = Number(activeIndex)
			const activeBar = bars[parsedActiveIndex].querySelector('.fill-elem')
			if (stop === 'true') {
				return
			}

			if (activeBar instanceof HTMLElement) {
				let percentageToAdd = 1
				let interval = (speed / 100) * 1

				this.idInterval = setInterval(() => {
					const widthInNumber = Number(activeBar.style.width.replace('%', ''))
					activeBar.style.width = `${widthInNumber + percentageToAdd}%`

					if (widthInNumber >= 100) {
						activeBar.style.width = '100%'
						clearInterval(this.idInterval)
					}
				}, interval)
			}
		}

		_react() {
			const thisEL = this
			const observer = new MutationObserver(function (mutations) {
				mutations.forEach(function (mutation) {
					if (mutation.type === 'attributes') {
						const targetElement = mutation.target as Element
						if (targetElement?.attributes?.['data-stop'] === 'true') {
							return
						} else {
							const activeIndex = Number(thisEL.dataset.activeSlide)
							const speed = thisEL.dataset.speed
							const stop = thisEL.dataset.stop
							thisEL._setActive(activeIndex, speed, stop)
						}
					}
				})
			})

			observer.observe(this, {
				attributes: true //configure it to listen to attribute changes
			})
		}
		_
	}
	let customElements: CustomElementRegistry = window.customElements

	customElements.define('slide-timer', SlideTimer)
</script>
