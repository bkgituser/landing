---
const { lengthSlides, activeSlide, speed, activeColor, colorInactive, customSliderClass, id } =
	Astro.props
---

<slide-timer
	data-active-slide={activeSlide}
	data-active-color={activeColor}
	data-speed={speed}
	data-stop="false"
	id={`${id}-slider-timer`}
	class="relative top-2 block"
	is="div"
>
	<div class="w-full">
		<div class={`flex justify-between gap-1 ${customSliderClass}`}>
			{
				Array(lengthSlides)
					.fill(null)
					.map(() => (
						<div style={{ background: colorInactive }} class={`bar h-[2px] w-full rounded-md`}>
							<div class={`fill-elem h-full w-0 bg-${activeColor}`} />
						</div>
					))
			}
		</div>
	</div>
</slide-timer>
<script>
	class SlideTimer extends HTMLElement {
		private idInterval: number | null = null
		constructor() {
			super()
			this.init()
		}

		init() {
			const activeIndex = Number(this.dataset.activeSlide) || 0
			const speed = Number(this.dataset.speed) || 5000
			const stop = this.dataset.stop === 'true'
			this.setActive(activeIndex, speed, stop)
			this.observeChanges()
		}

		setActive(activeIndex, speed, stop) {
			clearInterval(this.idInterval)
			if (stop) return

			const bars = [...this.querySelectorAll('.bar')]
			const activeBar = bars[activeIndex]?.querySelector('.fill-elem') as HTMLElement
			if (!activeBar) return

			const interval = speed / 100
			let width = Number(activeBar.style.width.replace('%', ''))

			this.idInterval = setInterval(() => {
				width += 1
				activeBar.style.width = `${Math.min(width, 100)}%`
				if (width >= 100) clearInterval(this.idInterval)
			}, interval)
		}

		observeChanges() {
			const observer = new MutationObserver((mutations) => {
				mutations.forEach((mutation) => {
					if (mutation.type === 'attributes') {
						const target = mutation?.target as HTMLElement
						if (target.dataset.stop === 'true') {
							clearInterval(this.idInterval)
						}
						if (mutation.attributeName === 'data-active-slide' || target.dataset.stop !== 'true') {
							const activeIndex = Number(target.dataset.activeSlide)
							const speed = Number(target.dataset.speed)
							const stop = target.dataset.stop === 'true'
							this.setActive(activeIndex, speed, stop)
						}
					}
				})
			})

			observer.observe(this, {
				attributes: true,
				attributeFilter: ['data-active-slide', 'data-stop']
			})
		}
	}

	customElements.define('slide-timer', SlideTimer)
</script>
