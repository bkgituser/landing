---
import SlideTimers from '@components/atom/SlideTimers.astro'
import { Image } from 'astro:assets'

const {
	lengthElements = 0,
	indexElements = true,
	id = 'benefit-slide',
	height = '100%',
	classWrapper,
	classSlideContainer,
	delay = 5000,
	customSliderClass = '',
	customSliderContainerClass = '',
	colorInactive = 'rgba(255,255,255,0.5)',
	activeColor = 'white',
	circleIndexColors = 'white',
	navigation = false
} = Astro.props
---

<custom-slider
	id={id}
	data-delay={delay}
	class={`relative block  w-full ${classWrapper}`}
	data-active-index={0}
	data-navigation={navigation}
>
	<slot name="prev-slider-timer" />
	{
		indexElements ? (
			<div class={`absolute top-2 z-30 h-1 w-full sm:hidden ${customSliderContainerClass}`}>
				<SlideTimers
					speed={delay}
					activeSlide={null}
					lengthSlides={lengthElements}
					activeColor={activeColor}
					colorInactive={colorInactive}
					customSliderClass={customSliderClass}
					id={id}
				/>
			</div>
		) : null
	}
	<div class={` h-full w-full ${classSlideContainer}`}>
		{
			navigation && (
				<div
					id={`${id}-nav-prev`}
					class="absolute left-0 top-0 z-[100] hidden h-full md:block md:w-[80px] lg:w-[124px]"
				>
					<span class="relative top-1/3 cursor-pointer">
						<img
							src="/assets/icons/chevron-left.svg"
							width="100"
							height="100"
							alt="navigate before"
						/>
					</span>
				</div>
			)
		}
		<slot />
		{
			navigation && (
				<div
					id={`${id}-nav-next`}
					class="absolute right-0 top-0 z-[100] hidden h-full md:block md:w-[80px] lg:w-[124px]"
				>
					<span class="relative top-1/3 cursor-pointer">
						<img
							src="/assets/icons/chevron-right.svg"
							width="100"
							height="100"
							alt="navigate next"
						/>
					</span>
				</div>
			)
		}
	</div>
	{
		(indexElements || navigation) && (
			<div class={`absolute bottom-0 z-30 h-8 w-full md:${navigation ? 'block' : 'hidden'}`}>
				<div class="flex w-full items-center justify-center gap-2">
					{Array(lengthElements)
						.fill(null)
						.map(() => (
							<div
								style={{ border: `1px solid ${circleIndexColors}` }}
								class={`h-2 w-2 rounded-full`}
							>
								<div
									style={{ background: circleIndexColors, height: '100%' }}
									class={`indexCircle w-full bg-${circleIndexColors}`}
								/>
							</div>
						))}
				</div>
			</div>
		)
	}
</custom-slider>
<script>
	import SliderComponent from 'src/screens/home/components/SliderComponent.astro'
	import InstagramSlider from '../../../scripts/InstagramClass'

	class InstagramSliderElement extends HTMLElement {
		idInterval = null
		slider = null
		constructor() {
			super()
			this.slider = new InstagramSlider(this.id, {
				activeClass: 'item-index-active',
				speed: 300,
				autoplay: true,
				delay: Number(this.dataset.delay),
				navigation: Boolean(this.dataset.navigation === 'true'),
				triggerOnAutoPlayToggle: (isPlaying) => {
					const container = document.getElementById(this.id)
					const slideTimer = container?.querySelector('slide-timer')

					if (slideTimer) {
						slideTimer.setAttribute('data-stop', (!isPlaying).toString())
					}
				},
				triggerOnIndexCallback: (newIndex) => {
					const container = document.getElementById(this.id)

					const slideTimer: HTMLElement = container?.querySelector('slide-timer')
					const fillBars = slideTimer?.querySelectorAll('.fill-elem')
					const indexCircles = container.querySelectorAll('.indexCircle')

					container.dataset.activeIndex = newIndex

					if (indexCircles) {
						indexCircles.forEach((circle, idx) => {
							if (idx === newIndex) {
								;(circle as HTMLElement).style.height = '0%'
							} else {
								;(circle as HTMLElement).style.height = '100%'
							}
						})
					}

					if (fillBars) {
						fillBars.forEach((element, index) => {
							if (index > newIndex - 1) {
								;(element as HTMLDivElement).style.width = '0%'
							} else {
								;(element as HTMLDivElement).style.width = '100%'
							}
						})
						slideTimer.dataset.activeSlide = newIndex
						// slideTimer.setAttribute('data-active-slide', newIndex)
					}
				}
			})
		}

		next() {
			if (this?.slider) {
				this.slider.navigateNext()
			}
		}

		previous() {
			if (this?.slider) {
				this.slider.navigatePrevious()
			}
		}
	}

	let customElements: CustomElementRegistry = window.customElements

	customElements.define('custom-slider', InstagramSliderElement)
</script>

<style define:vars={{ height }}>
	@media (max-height: 480px) {
		.slideContainer {
			justify-content: flex-start;
		}
	}
	custom-slider {
		height: var(--height);
		user-select: contain;
	}
</style>
