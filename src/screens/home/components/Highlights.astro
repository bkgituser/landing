---
import { t } from 'i18next'

const columns = [
	{
		label: 'landing.highlights.item1.label',
		content: 'landing.highlights.item1.content'
	},
	{
		label: 'landing.highlights.item2.label',
		content: 'landing.highlights.item2.content',
		button: 'landing.highlights.item2.button'
	},
	{
		label: 'landing.highlights.item3.label',
		content: 'landing.highlights.item3.content'
	},
	{
		label: 'landing.highlights.item4.label',
		content: 'landing.highlights.item4.content'
	}
]
---

<section class="min-h-screen bg-white" id="highlights">
	<div class="container-screen pb-16 pt-16 lg:pt-20 laptop:pt-24 xl:pb-28">
		<div class="md:block">
			<h3
				class="highlight-title mx-auto bg-black px-5 py-5 text-center text-2xl font-semibold text-white opacity-0 sm:inline-block md:px-5 md:text-mid xl:px-7"
			>
				{t('landing.highlights.title')}
			</h3>
		</div>
		<div class="flex h-32 items-center lg:h-36">
			<img src="/assets/icons/arrow.svg" alt="arrow" class="ml-6" loading="lazy" />
		</div>
		<div
			class="columns-container flex flex-col items-start justify-center px-12 sm:px-0 md:flex-row md:flex-wrap md:justify-evenly lg:justify-between lg:px-12"
		>
			{
				columns.map((col, index) => (
					<>
						<div class="column-highlight relative opacity-0 md:mb-12  md:flex-shrink-0 md:basis-[42%] lg:max-w-[204px] xl:max-w-[245px] xxl:xl:max-w-[275px]">
							<div class="title flex items-center justify-between">
								<>
									<div class="mb-4 text-2xl font-bold">{t(col.label)}</div>
									<span class="state-symbol text-xl font-semibold text-black md:hidden">+</span>
								</>
							</div>
							<div
								style=""
								class="column-content max-h-0 overflow-hidden duration-300 ease-in-out md:max-h-none "
							>
								<p
									class={`text-justify text-xl text-black md:text-left ${index !== columns.length - 1 ? '' : ''} `}
								>
									{t(col.content)}
								</p>
								{col?.button ? (
									<button
										id="learn-more-repairability"
										class="mt-10 rounded-lg bg-black px-6 py-4 font-bold text-white md:mt-20"
									>
										<a href="#repairability-top">{t(col.button)}</a>
									</button>
								) : null}
							</div>
						</div>
						{index !== columns.length - 1 && (
							<div
								class={`border-black-200 my-4 h-2 ${index === 1 ? 'md:hidden lg:block' : ''} w-full border-t-2 md:h-[160px]  md:w-0 md:border-r-2 lg:mt-12 `}
							/>
						)}
					</>
				))
			}
			<div class="spacer h-[34vh] w-full"></div>
		</div>
	</div>
</section>
<script>
	const columns = document.querySelectorAll('.column-highlight')
	let current = null

	columns.forEach((column, index) => {
		if (column instanceof HTMLElement) {
			column.addEventListener('click', (e) => {
				// we close the one open
				if (current !== null && current !== index) {
					const currentOpen = columns[current]
					toggleElement(currentOpen)
				}

				current = current === index ? null : index
				toggleElement(column)
			})
		}
	})

	function toggleElement(element) {
		const heightClass = 'max-h-96'
		const content = element.querySelector('.column-content')
		content.classList.toggle(heightClass)
		content.classList.toggle('overflow-auto')
		element.querySelector('.state-symbol').innerText = element.classList.contains(heightClass)
			? '-'
			: '+'
	}
</script>
<style>
	@media (min-width: 976px) and (max-width: 1150px) {
		.container-screen {
			padding-left: 1.3rem;
			padding-right: 1.3rem;
		}
	}

	@media (min-width: 1440px) and (max-height: 650px) {
		.container-screen {
			padding-top: 2rem;
		}
	}
</style>
