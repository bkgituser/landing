---
import { t } from 'i18next'
import { Trans } from 'astro-i18next/components'

import { getImage } from 'astro:assets'
import smartUseBg from '../../../img/smart-use-bg.png'
import ImageBackground from '../../../components/template/ImageBackground.astro'

const optimizedBackground = await getImage({ src: smartUseBg, format: 'webp' })
---

<section id="smart-use" class="relative h-screen">
	<ImageBackground desktpBg={optimizedBackground}>
		<div class="container-screen relative pt-20 md:pt-32 xl:pb-40 xl:pt-48">
			<div class="smart-title-box opacity-0">
				<div class="mb-4 text-base uppercase text-white lg:text-xl">
					{t('landing.smartUse.badge')}
				</div>
				<h1 class="w-full text-left text-5xl font-bold text-white">
					<Trans i18nKey="landing.smartUse.title">
						Smart use <br /> of materials
					</Trans>
				</h1>
			</div>
			<div class="feature-smart-1 mt-10 lg:mt-20 xl:mt-24">
				<h3 class="animated-subtitle mb-2 w-full text-left text-mid font-bold text-white">
					{t('landing.smartUse.feature1')}
				</h3>
				<p class="text-lg font-thin text-white">
					<Trans i18nKey="landing.smartUse.feature1Description">
						50% lighter than Aluminium. Achieve <br /> Large Working Width with Low Weight
					</Trans>
				</p>
			</div>
			<div class="feature-smart-2 absolute">
				<div class="ml-auto">
					<h3 class="mb-2 text-left text-mid font-bold text-white">
						{t('landing.smartUse.feature2')}
					</h3>
					<p class="text-lg font-thin text-white">
						<Trans i18nKey="landing.smartUse.feature2Description">
							More Efficient to Withstand <br />
							Concentrated Loads of Ties and Joints
						</Trans>
					</p>
				</div>
			</div>
		</div>
		<!-- LEFT ZOOM -->
		<div
			class="position-zoom-2 absolute right-0 top-0 flex h-full w-1/2 items-center justify-center"
		>
			<div class="absolute left-0 top-[47%]">
				<!-- CIRCLE -->
				<div
					class="zoom2 relative h-32 w-32 rounded-full border-2 bg-white bg-opacity-20 opacity-0 md:h-40 md:w-40 xl:h-52 xl:w-52"
				>
					<!-- BIND -->
					<div
						class="bind-zoom2 absolute right-1/2 top-full max-h-0 max-w-0 border-b-2 border-r-2 border-white sm:border-b-0 sm:border-t-2 md:left-full md:top-1/2"
					>
					</div>
				</div>
			</div>
		</div>

		<!-- RIGHT ZOOM -->
		<div class="position-zoom-1 justify- absolute left-0 top-0 flex h-full w-1/2 items-center">
			<div class="absolute left-[30%] top-[62%] sm:left-[63%]">
				<!-- CIRCLE -->
				<div
					class="zoom1 relative h-32 w-32 rounded-full border-2 bg-white bg-opacity-20 opacity-0 md:h-40 md:w-40 xl:h-52 xl:w-52"
				>
					<!-- BIND -->
					<div
						class="bind-zoom1 absolute bottom-full left-1/2 max-h-0 max-w-0 border-b-2 border-l-2 border-white md:bottom-1/2 md:left-auto md:right-full"
					>
					</div>
				</div>
			</div>
		</div>
	</ImageBackground>
</section>
<script>
	let isMobile = window.innerWidth <= 480
	let isMedium = window.innerWidth >= 768

	let isSmall = window.innerWidth < 768 && window.innerWidth > 480
	window.addEventListener('resize', () => {
		const windowWidth = window.innerWidth

		isMobile = windowWidth < 480

		isSmall = windowWidth < 768 && windowWidth > 480

		isMedium = windowWidth > 768

		setSizeOfBinds()
	})

	function setSizeOfBinds() {
		const bind1: HTMLElement = document.querySelector('.bind-zoom1')
		const sizeBind1 = bind1.getBoundingClientRect()
		const bind2: HTMLElement = document.querySelector('.bind-zoom2')
		const sizeBind2 = bind2.getBoundingClientRect()
		const feature1 = document.querySelector('.feature-smart-1').getBoundingClientRect()
		const feature2 = document.querySelector('.feature-smart-2').getBoundingClientRect()

		console.log({ feature1, bind1 })
		console.log('')
		console.log({ feature2, bind2 })
		console.log('')
		if (isMobile) {
			const heightBind1Mobile = sizeBind1.y - feature1.y - feature1.height - 32
			bind1.style.height = `${heightBind1Mobile}px`
			bind1.style.width = `${1}px`

			const heightBind2Mobile = feature2.y - sizeBind2.y + 20
			bind2.style.height = `${heightBind2Mobile}px`
			bind2.style.width = `32px`
		} else if (isSmall) {
			const heightBind1Small = sizeBind1.y - feature1.y - feature1.height - 32
			bind1.style.height = `${heightBind1Small}px`
			bind1.style.width = `${1}px`

			const heightBind2Small = feature2.y - sizeBind2.y - 16
			bind2.style.height = `${heightBind2Small}px`
			bind2.style.width = `1px`
		} else if (isMedium) {
			const widthBind1Medium = sizeBind1.x - feature1.x
			const heightBind1Medium = sizeBind1.y - feature1.y - feature1.height - 16

			bind1.style.height = `${heightBind1Medium.toFixed(2)}px`
			bind1.style.width = `${widthBind1Medium.toFixed(2)}px`
			console.log({ widthBind1Medium, heightBind1Medium })
			console.log('')
			const widthBind2Medium = feature2.x - sizeBind2.x
			const heightBind2Medium = feature2.y - sizeBind2.y - 32
			console.log({ widthBind2Medium, heightBind2Medium })

			bind2.style.height = `${heightBind2Medium.toFixed(2)}px`
			bind2.style.width = `${widthBind2Medium.toFixed(2)}px`
		}
	}
	// if (isMobile) {
	// 		const heightBind1Mobile = sizeBind1.y - feature1.y - feature1.height - 32
	// 		bind1.style.height = `${heightBind1Mobile}px`
	// 		bind1.style.width = `${1}px`

	// 		const heightBind2Mobile = feature2.y - sizeBind2.y + 20
	// 		bind2.style.height = `${heightBind2Mobile}px`
	// 		bind2.style.width = `32px`
	// 	} else if (isSmall) {
	// 		const heightBind1Small = sizeBind1.y - feature1.y - feature1.height - 32
	// 		bind1.style.height = `${heightBind1Small}px`
	// 		bind1.style.width = `${1}px`

	// 		const heightBind2Small = feature2.y - sizeBind2.y - 16
	// 		bind2.style.height = `${heightBind2Small}px`
	// 		bind2.style.width = `1px`
	// 	} else if (isMedium) {
	// 		const widthBind1Medium = sizeBind1.x - feature1.x
	// 		const heightBind1Medium = sizeBind1.y - feature1.y - feature1.height + 32

	// 		bind1.style.height = `${heightBind1Medium.toFixed(2)}px`
	// 		bind1.style.width = `${widthBind1Medium.toFixed(2)}px`

	// 		const widthBind2Medium = feature2.x - sizeBind2.x
	// 		const heightBind2Medium = feature2.y - sizeBind2.y - 100
	// 		console.log({ sizeBind2, feature2, widthBind2Medium, heightBind2Medium })

	// 		bind2.style.height = `${heightBind2Medium.toFixed(2)}px`
	// 		bind2.style.width = `${widthBind2Medium.toFixed(2)}px`
	// 	}
	setSizeOfBinds()
</script>
<style>
	@media (min-width: 768px) {
		.feature-smart-2 {
			right: 0;
			bottom: 8%;
		}
	}

	@media (min-width: 1440px) {
		.feature-smart-2 {
			right: 14%;
			bottom: 12%;
		}
	}

	@media (min-width: 1700px) {
		.feature-smart-2 {
			right: 18%;
			bottom: 14%;
		}
	}

	@media (min-width: 481px) and (max-width: 1440px) and (max-height: 740px) {
		.feature-smart-2 {
			right: 2%;
		}
	}

	/* MOBILE */

	@media (min-width: 480px) and (max-width: 767px) and (max-height: 844px) {
		.feature-smart-2 {
			right: 0%;
			bottom: 2rem;
		}
	}

	@media (min-width: 391px) and (max-width: 480px) {
		.feature-smart-2 {
			left: 5%;
			bottom: 2rem;
		}
	}

	@media (max-width: 390px) {
		.feature-smart-1 {
			margin-top: 1rem;
		}

		.feature-smart-2 {
			left: 5%;
			bottom: 2rem;
		}
	}

	@media (max-height: 770px) {
		.container-screen {
			padding-top: 3.5rem !important;
		}
	}
</style>
