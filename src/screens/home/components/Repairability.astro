---
import { t } from 'i18next'
---

<>
	<section class="min-h-screen bg-white" id="repairability">
		<div
			class="md:container-screen flex h-auto flex-col-reverse items-start justify-between gap-16 pb-2 pt-4 md:pb-20 md:pt-32 lg:h-full lg:flex-row lg:flex-wrap lg:gap-0 xl:pt-48"
		>
			<div
				class="container-screen md:px-auto mb-8 px-10 md:px-0 lg:mb-0 lg:flex lg:w-2/5 lg:flex-col lg:items-start lg:justify-start xl:w-1/2 xl:justify-between"
			>
				<div class="hidden lg:block">
					<h3 class="repairability-title text-2xl font-semibold text-black opacity-0 md:text-4xl">
						{t('landing.repairability.title')}
					</h3>
				</div>
				<div class="mt-5 hidden md:mt-4 lg:block">
					<p
						class="repairability-description text-left text-2xl opacity-0 md:max-w-[450px] lg:max-w-[345px]"
					>
						{t('landing.repairability.description')}
					</p>
				</div>
				<div class="repairability-arrow hidden h-[18vh] items-center opacity-0 lg:flex">
					<img src="/assets/icons/arrow.svg" alt="arrow" loading="lazy" />
				</div>
				<div class="flex flex-col items-center justify-center gap-4 sm:px-10 md:flex-row lg:px-0">
					<button
						class="w-full max-w-[265px] bg-black px-4 py-4 text-[14px] font-semibold text-white md:text-[10.38px] lg:max-w-none lg:px-0 laptop:w-[165px]"
					>
						{t('landing.repairability.downloadButton1')}
					</button>
					<button
						class="w-full max-w-[265px] bg-black px-4 py-4 text-[14px] font-semibold text-white md:text-[10.38px] lg:max-w-none lg:px-0 laptop:w-[165px]"
					>
						{t('landing.repairability.downloadButton2')}
					</button>
				</div>
			</div>
			<div
				class="container-screen lg:max-w-unset h-auto w-full pt-8 md:pt-0 lg:h-full lg:w-3/5 lg:px-0 xl:flex xl:w-1/2 xl:flex-col xl:justify-between"
			>
				<div class="px-10 lg:hidden">
					<h3 class="repairability-title text-2xl font-semibold text-black opacity-0 md:text-4xl">
						{t('landing.repairability.title')}
					</h3>
				</div>
				<div class="repairability-arrow flex h-16 items-center px-12 opacity-0 lg:hidden">
					<img src="/assets/icons/arrow.svg" alt="arrow" loading="lazy" />
				</div>

				<div class="content mx-auto mb-3 block w-full">
					<video
						autoplay={true}
						loop
						playsinline
						class="full-width-video object-contain xl:min-h-[423px] xl:object-contain"
						muted={true}
						preload="metadata"
					>
						<source src="/assets/videos/repairability_summary.mp4" type="video/mp4" />
					</video>
				</div>
				<div class="my-8 flex items-center justify-center px-5 lg:my-0 lg:justify-start">
					<button
						class="play-hidden-video flex h-[56px] w-[261px] items-center justify-center gap-4 border-[1px] border-black px-2 py-2 text-black md:h-auto md:w-auto md:basis-auto"
					>
						<img
							src="/assets/icons/play-black.svg"
							alt="play"
							class="h-4 w-4 md:h-auto md:w-auto"
							loading="lazy"
						/>
						<p class="mt-1 text-[10.38px] text-base font-semibold">
							{t('landing.repairability.longVersionButton')}
						</p>
					</button>
				</div>
			</div>
		</div>
	</section>
	<!-- HIDDEN VIDEO -->
	<div class="video-wrapper z-full fixed bottom-0 left-0 right-0 top-0 hidden">
		<button class="absolute right-5 top-5 text-3xl text-white drop-shadow-lg"> X </button>
		<video
			id="repairability-full"
			class="fixed bottom-0 left-0 right-0 top-0"
			muted={true}
			preload="none"
		>
			<source src="/assets/videos/repairability-full.mp4" type="video/mp4" />
		</video>
	</div>
</>
<script>
	const playButton = document.querySelector('.play-hidden-video')
	const videoWrapper = document.querySelector('.video-wrapper')
	const fullVideo = document.getElementById('repairability-full') as HTMLVideoElement

	let currentScroll

	let isFullscreen = document.fullscreenElement || document.webkitFullscreenElement

	fullVideo.onfullscreenchange = function (e) {
		isFullscreen = !isFullscreen

		if (isFullscreen) {
			fullVideo.play()
		} else {
			if (document.exitFullscreen) {
				document.exitFullscreen()
			} else if (document.webkitExitFullscreen) {
				document.webkitExitFullscreen()
			}

			fullVideo.pause()

			videoWrapper.classList.add('hidden')
		}
	}

	playButton.addEventListener('click', () => {
		// Store the current scroll position
		if (!currentScroll) {
			currentScroll = window.scrollY
		}

		videoWrapper.classList.remove('hidden')
		if (fullVideo.requestFullscreen) {
			fullVideo.requestFullscreen()
		} else if (fullVideo?.webkitRequestFullscreen) {
			fullVideo?.webkitRequestFullscreen()
		}
	})
</script>
<style>
	.full-width-video {
		width: calc(100% + 2.5rem);
		max-width: none;
		position: relative;
		left: -1.25rem;
	}
	@media (max-height: 480px) {
		.container-screen {
			margin-top: 3.5rem;
		}

		section > div {
			padding: 2rem 1rem;
		}

		button {
			width: auto;
		}

		.gap-16 {
			gap: 0rem;
		}

		.my-8 {
			margin: 1rem 0;
		}
	}
	@media (min-width: 480px) and (max-width: 1600px) and (max-height: 900px) {
		.container {
			max-width: none;
			padding-left: 6rem;
			padding-right: 6rem;
		}
	}

	@media (min-width: 1440px) and (max-height: 700px) {
		.xl\:pt-48 {
			padding-top: 6rem;
			padding-bottom: 6rem;
		}
	}
</style>
