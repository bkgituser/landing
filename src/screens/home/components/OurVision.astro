---
import { Trans } from 'astro-i18next/components'
import { t } from 'i18next'
import Placeholder from '../../../img/placeholder-ourvision.png'
import ImageBackground from '@components/template/ImageBackground.astro'
---

<section id="our-vision">
	<div class="relative min-h-screen overflow-hidden">
		<ImageBackground desktpBg={Placeholder}>
			<div class="video-wrapper-vision z-full fixed bottom-0 left-0 right-0 top-0 hidden">
				<button class="absolute right-5 top-5 text-3xl text-white drop-shadow-lg"> X </button>
				<video
					id="our-vision-full"
					class="fixed bottom-0 left-0 right-0 top-0"
					muted={true}
					preload="none"
				>
					<source src="/assets/videos/our-vision.mp4" type="video/mp4" />
				</video>
			</div>
			<div
				class="videoMask absolute inset-0 h-full w-full bg-[linear-gradient(180deg,_rgba(0,_0,_0,_0.00)_0%,_rgba(0,_0,_0,_0.40)_100%)]"
			>
				<div class="container-screen z-10 mx-auto flex h-full flex-col items-start justify-center">
					<div class="content relative z-10 xl:w-3/4">
						<p
							class="ourvision-line py-4 text-2xl font-semibold text-white drop-shadow-lg md:drop-shadow-none"
						>
							{t('landing.ourVision.badge')}
						</p>
						<span
							class="ourvision-line block w-8 border-2 border-white drop-shadow-lg md:w-10 md:drop-shadow-none"
						></span>
						<h3
							class="ourvision-line pb-1 pt-5 text-plusMid font-semibold text-white drop-shadow-lg md:text-plusMid md:drop-shadow-none"
						>
							{t('landing.ourVision.title')}
						</h3>

						<p
							class="ourvision-line main-text text-left text-[32px] leading-9 text-white drop-shadow-lg md:hidden md:text-justify md:drop-shadow-none xl:leading-[3rem]"
						>
							{t('landing.ourVision.description')}
						</p>
						{
							t('landing.ourVision.description')
								.split('\n')
								.map((line) => (
									<p class="ourvision-line hidden text-left  text-4xl text-white drop-shadow-lg md:block md:text-justify md:drop-shadow-none xl:leading-[3rem]">
										{line}
									</p>
								))
						}

						<div class="mt-10 md:mt-12">
							<button
								class="ourvision-line playButton flex items-center gap-4 bg-black px-8 py-2 text-white md:px-12 md:py-4"
							>
								<img
									src="/assets/icons/play.svg"
									alt="play"
									class="h-4 w-4 md:h-auto md:w-auto"
									loading="lazy"
								/>
								<p class="text-base font-semibold md:text-xl">{t('landing.ourVision.button')}</p>
							</button>
							<p class="mt-2 w-[177px] text-center text-base text-[#A0A0A0] md:hidden">
								Rotate your phone
							</p>
						</div>
					</div>
				</div>
			</div>
		</ImageBackground>
	</div>
</section>
<script>
	// const playButton = document.querySelector('.playButton')
	// const mask = document.querySelector('.videoMask')
	// const video = document.getElementById('our-vision-video') as HTMLVideoElement
	// const poster = document.getElementById('video-poster')

	// playButton.addEventListener('click', function () {
	// 	if (video instanceof HTMLVideoElement) {
	// 		mask.classList.add('hidden')
	// 		poster.classList.add('hidden')
	// 		video.play()
	// 		toggleControls()
	// 	}
	// })

	// video.addEventListener('pause', function () {
	// 	mask.classList.remove('hidden')
	// 	toggleControls()
	// })

	// function toggleControls() {
	// 	if (video.hasAttribute('controls')) {
	// 		video.removeAttribute('controls')
	// 	} else {
	// 		video.setAttribute('controls', 'controls')
	// 	}
	// }

	// function isFullscreen() {
	// 	return !!(
	// 		document.fullscreenElement ||
	// 		document.webkitFullscreenElement ||
	// 		document.mozFullScreenElement ||
	// 		document.msFullscreenElement
	// 	)
	// }

	// document.addEventListener('webkitfullscreenchange', () => {
	// 	if (!isFullscreen()) {
	// 		video.pause()
	// 	}
	// })

	// playButton.addEventListener('click', () => {
	// 	if (video.requestFullscreen) {
	// 		// W3C API
	// 		video.requestFullscreen()
	// 	} else if (video.mozRequestFullScreen) {
	// 		// Mozilla current API
	// 		video.mozRequestFullScreen()
	// 	} else if (video.webkitRequestFullscreen) {
	// 		// Webkit current API
	// 		video.webkitRequestFullscreen()
	// 	} else if (video.webkitEnterFullscreen) {
	// 		// This is the IOS Mobile edge case
	// 		video.webkitEnterFullscreen()
	// 	} else if (video.webkitEnterFullscreen) {
	// 		// Toggle fullscreen in Safari for iPad
	// 		video.webkitEnterFullscreen()
	// 	}
	// })

	const playButton = document.querySelector('.playButton')
	const videoWrapper = document.querySelector('.video-wrapper-vision')
	const fullVideo = document.getElementById('our-vision-full') as HTMLVideoElement

	// Function to check fullscreen state
	function isFullScreen() {
		return !!(
			document.fullscreenElement ||
			document.webkitFullscreenElement ||
			document.mozFullScreenElement ||
			document.msFullscreenElement
		)
	}

	// Function to toggle fullscreen
	function toggleFullScreen() {
		if (isFullScreen()) {
			if (document.exitFullscreen) {
				document.exitFullscreen()
			} else if (document.webkitExitFullscreen) {
				document.webkitExitFullscreen()
			} else if (document.mozCancelFullScreen) {
				document.mozCancelFullScreen()
			} else if (document.msExitFullscreen) {
				document.msExitFullscreen()
			}
		} else {
			if (fullVideo.requestFullscreen) {
				fullVideo.requestFullscreen()
			} else if (fullVideo.mozRequestFullScreen) {
				fullVideo.mozRequestFullScreen()
			} else if (fullVideo.webkitRequestFullscreen) {
				fullVideo.webkitRequestFullscreen()
			} else if (fullVideo.webkitEnterFullscreen) {
				fullVideo.webkitEnterFullscreen()
			}
		}
	}

	// Event listener for fullscreen change
	document.addEventListener('fullscreenchange', () => {
		if (!isFullScreen()) {
			fullVideo.pause()
			videoWrapper.classList.add('hidden')
		} else {
			if (fullVideo.paused) {
				fullVideo.play()
			}
		}
	})

	// Event listener for play button
	playButton.addEventListener('click', () => {
		console.log('entra al')
		videoWrapper.classList.remove('hidden')
		toggleFullScreen()
	})

	// Remove event listeners when they are no longer needed
	function cleanup() {
		playButton.removeEventListener('click', toggleFullScreen)
		document.removeEventListener('fullscreenchange', cleanup)
	}

	// Add cleanup listener
	document.addEventListener('fullscreenchange', cleanup)
</script>
<style>
	@media (min-width: 480px) and (max-width: 1600px) and (max-height: 900px) {
		.container {
			max-width: none;
			padding-left: 6rem;
			padding-right: 6rem;
		}
	}

	/* LANDSCAPE */
	@media (max-height: 480px) {
		.main-text {
			font-size: 24px;
		}
	}
</style>
